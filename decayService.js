// decayService.js
const supabase = require('./supabase');
const {
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle
} = require("discord.js");


const MAPS = [
  "TheIsland","Valguero","Ragnar√∂k","TheCenter","CrystalIsles",
  "Aberration","Extinction","ScorchedEarth","Genesis1","Genesis2",
  "Fjordur","LostIsland","Aquatica"
];
// Note: b·∫°n c√≥ th·ªÉ th√™m map v√†o ƒë√¢y n·∫øu c·∫ßn

async function ensureUser(userId, username='') {
  const { data, error } = await supabase.from('users').select('*').eq('id', userId).single();
  if (error && error.code !== 'PGRST116') throw error;
  if (!data) {
    await supabase.from('users').insert({ id: userId, username });
  } else if (username && data.username !== username) {
    await supabase.from('users').update({ username }).eq('id', userId);
  }
}

async function addOrResetDecay(userId, username, mapName, decayDays) {
  await ensureUser(userId, username);
  // upsert using unique index (user_id, map_name)
  const { error } = await supabase
    .from('decays')
    .upsert(
      { user_id: userId, map_name: mapName, decay_days: decayDays, start_time: new Date().toISOString() },
      { onConflict: ['user_id','map_name'] }
    );
  if (error) throw error;
  return true;
}

async function editDecay(userId, mapName, decayDays) {
  const { error } = await supabase
    .from('decays')
    .update({ decay_days: decayDays, updated_at: new Date().toISOString() })
    .eq('user_id', userId)
    .eq('map_name', mapName);
  if (error) throw error;
  return true;
}

async function deleteDecay(userId, mapName) {
  const { error } = await supabase
    .from('decays')
    .delete()
    .eq('user_id', userId)
    .eq('map_name', mapName);
  if (error) throw error;
  return true;
}

async function resetDecay(userId, mapName) {
  const { error } = await supabase
    .from('decays')
    .update({ start_time: new Date().toISOString(), updated_at: new Date().toISOString() })
    .eq('user_id', userId)
    .eq('map_name', mapName);
  if (error) throw error;
  return true;
}

async function getUserDecays(userId) {
  const { data, error } = await supabase.from('decays').select('*').eq('user_id', userId);
  if (error) throw error;
  return data || [];
}

async function getBotMessageRow(key) {
  const { data, error } = await supabase.from('bot_messages').select('*').eq('key', key).single();
  if (error && error.code !== 'PGRST116') throw error;
  return data || null;
}
async function upsertBotMessage(key, channel_id, message_id) {
  const { error } = await supabase
    .from('bot_messages')
    .upsert({ key, channel_id, message_id, updated_at: new Date().toISOString() }, { onConflict: ['key'] });
  if (error) throw error;
}

/**
 * H√†m checkDecayReminders
 * - qu√©t t·∫•t c·∫£ decays
 * - n·∫øu c√≤n 3 / 2 / 1 ng√†y th√¨ g·ª≠i th√¥ng b√°o v√†o NEWS_SPAM_ID v√† tag user
 * - tr√°nh spam nh·ªù c·ªôt last_notified_days
 */
async function checkDecayReminders(client) {
  const { data: decays, error } = await supabase.from("decays").select("*");
  if (error) {
    console.error("‚ùå L·ªói l·∫•y d·ªØ li·ªáu decay:", error);
    return;
  }

  for (const d of decays) {
    const end = new Date(d.start_time).getTime() + d.decay_days * 24 * 60 * 60 * 1000;
    const leftMs = end - Date.now();
    const leftDays = Math.max(0, Math.floor(leftMs / (24 * 3600 * 1000)));
    const leftHours = Math.max(0, Math.floor((leftMs % (24 * 3600 * 1000)) / (3600 * 1000)));

    // Ch·ªâ g·ª≠i khi c√≤n 3 / 2 / 1 ng√†y v√† ch∆∞a g·ª≠i cho m·ªëc ƒë√≥
    if ([3, 2, 1].includes(leftDays) && d.last_notified_days !== leftDays) {
      try {
        const user = await client.users.fetch(d.user_id).catch(() => null);
        if (!user) continue;

        // G·ªçi embed chuy√™n nghi·ªáp (h√†m b·∫°n ƒë√£ th√™m ·ªü decayService.js)
        await sendDecayAlertEmbed(
          client,
          user,
          d.map_name,
          d.map_label,
          leftDays,
          leftHours,
          "ASE"
        );

        // C·∫≠p nh·∫≠t m·ªëc ƒë√£ g·ª≠i
        await supabase
          .from("decays")
          .update({ last_notified_days: leftDays })
          .eq("id", d.id);
      } catch (err) {
        console.error("‚ùå L·ªói khi g·ª≠i c·∫£nh b√°o ASE:", err);
      }
    }
  }
}

async function updateDecayMessage(client) {
  try {
    const row = await getBotMessageRow("check_decay_message");
    if (!row) return;

    const channel = await client.channels.fetch(process.env.NEWS_CHECKDECAY_ID);
    const message = await channel.messages.fetch(row.message_id);

    const ownerId = "680726526010064899";
    const { data: decays, error } = await supabase
      .from("decays")
      .select("*")
      .eq("user_id", process.env.OWNER_ID);

    if (error) throw error;

    // üé® Header m√¥ t·∫£
    let header = `**üìã Decay list c·ªßa <@${ownerId}>**\n*C·∫≠p nh·∫≠t t·ª± ƒë·ªông m·ªói 30s*\n\n`;

    // üîπ T·∫°o c√°c ‚Äú√¥ map‚Äù ki·ªÉu list
    const boxList = MAPS.map((map) => {
      const record = decays.find((d) => d.map_name === map);
      let status;
      const now = Date.now();

      if (!record) {
        status = "‚ö´ **Ch∆∞a thi·∫øt l·∫≠p**";
      } else {
        const end = new Date(record.start_time).getTime() + record.decay_days * 86400000;
        const leftMs = end - now;
        const leftDays = Math.max(0, Math.floor(leftMs / 86400000));
        const leftHours = Math.max(0, Math.floor((leftMs % 86400000) / 3600000));

        if (leftMs <= 0) status = "üî¥ **ƒê√£ h·∫øt h·∫°n decay**";
        else if (leftDays <= 1) status = `üü† C√≤n **${leftDays} ng√†y ${leftHours} gi·ªù**`;
        else status = `üü¢ C√≤n **${leftDays} ng√†y ${leftHours} gi·ªù**`;
      }

      // üß± M√¥ ph·ªèng ‚Äú√¥ box‚Äù b·∫±ng blockquote + code block nh·∫π
      return `> üó∫Ô∏è **${map}**\n> \`${status.replace(/\*/g, "")}\``;
    }).join("\n\n");

    // üßæ G·ªôp m√¥ t·∫£ cu·ªëi c√πng
    const description = header + boxList;

    // ‚ú® Embed layout
    const embed = new EmbedBuilder()
      .setColor(0x1e1f22)
      .setTitle("üõ°Ô∏è Check Decay - Overview")
      .setDescription(description)
      .setThumbnail("https://cdn-icons-png.flaticon.com/512/561/561611.png")
      .setTimestamp()
      .setFooter({
        text: "Brought to you by Kalendell ‚Ä¢ c·∫≠p nh·∫≠t t·ª± ƒë·ªông",
        iconURL: client.user.displayAvatarURL(),
      });

    // üîò N√∫t thao t√°c
    const rowComponents = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId("view_my_decay")
        .setLabel("Hi·ªÉn th·ªã check decay c·ªßa b·∫°n")
        .setStyle(ButtonStyle.Primary),
      new ButtonBuilder()
        .setCustomId("add_decay")
        .setLabel("Add check decay")
        .setStyle(ButtonStyle.Success),
      new ButtonBuilder()
        .setCustomId("edit_decay")
        .setLabel("Edit check decay")
        .setStyle(ButtonStyle.Secondary),
      new ButtonBuilder()
        .setCustomId("delete_decay")
        .setLabel("Delete decay")
        .setStyle(ButtonStyle.Danger)
    );

    await message.edit({ embeds: [embed], components: [rowComponents] });
  } catch (err) {
    console.error("‚ùå L·ªói updateDecayMessage:", err);
  }
}



/**
 * G·ª≠i th√¥ng b√°o decay chuy√™n nghi·ªáp cho ASE (·∫£nh n·ªÅn GIF ng·∫´u nhi√™n)
 * @param {object} client - Discord Client
 * @param {object} user - User Discord (ng∆∞·ªùi nh·∫≠n)
 * @param {string} mapName - T√™n map (vd: THEISLAND)
 * @param {number} daysLeft - Ng√†y c√≤n l·∫°i
 * @param {number} hoursLeft - Gi·ªù c√≤n l·∫°i
 */
async function sendDecayAlertEmbed(client, user, mapName, daysLeft, hoursLeft) {
  // üé® M√†u v√† icon theo th·ªùi gian c√≤n l·∫°i
  let color = 0xf1c40f; // v√†ng m·∫∑c ƒë·ªãnh (3 ng√†y)
  let icon = "‚ö†Ô∏è";
  if (daysLeft <= 2) {
    color = 0xe74c3c; // ƒë·ªè kh·∫©n c·∫•p
    icon = "üö®";
  }

  // üåÜ ·∫¢nh GIF n·ªÅn ng·∫´u nhi√™n (b·∫°n thay 5 link n√†y b·∫±ng link t·ª´ Discord)
  const backgroundGifs = [
    "https://media.discordapp.net/attachments/.../image1.gif",
    "https://media.discordapp.net/attachments/.../image2.gif",
    "https://media.discordapp.net/attachments/.../image3.gif",
    "https://media.discordapp.net/attachments/.../image4.gif",
    "https://media.discordapp.net/attachments/.../image5.gif"
  ];
  const randomImage = backgroundGifs[Math.floor(Math.random() * backgroundGifs.length)];

  // üß± T·∫°o embed c·∫£nh b√°o ƒë·∫πp m·∫Øt
  const embed = new EmbedBuilder()
    .setColor(color)
    .setTitle(`${icon} BASE DECAY WARNING (ASE)`)
    .setDescription(
      `**<@${user.id}>**, base c·ªßa b·∫°n s·∫Øp b·ªã decay!\n\n` +
      `üó∫Ô∏è **Map:** ${mapName.toUpperCase()}\n` +
      `‚è≥ **Th·ªùi gian c√≤n l·∫°i:** ${daysLeft} ng√†y ${hoursLeft} gi·ªù\n` +
      `üìÖ **H·ªá th·ªëng:** ASE\n\n` +
      `> H√£y v√†o game v√† ch·∫°m v√†o base ƒë·ªÉ reset decay tr∆∞·ªõc khi h·∫øt h·∫°n.`
    )
    .setThumbnail(user.displayAvatarURL())
    .setImage(randomImage)
    .setTimestamp()
    .setFooter({
      text: "Brought to you by Ayaka ‚Ä¢ ASE Decay Monitor",
      iconURL: client.user.displayAvatarURL()
    });

  // üì¢ G·ª≠i tin nh·∫Øn ƒë·∫øn channel th√¥ng b√°o ASE
  const channelId = process.env.NEWS_SPAM_ID;
  const channel = await client.channels.fetch(channelId).catch(() => null);
  if (!channel) return console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y channel th√¥ng b√°o ASE");

  await channel.send({ embeds: [embed] });
}



module.exports = {
  MAPS,
  ensureUser,
  addOrResetDecay,
  editDecay,
  deleteDecay,
  resetDecay,
  getUserDecays,
  getBotMessageRow,
  upsertBotMessage,
  updateDecayMessage,
  checkDecayReminders,
  sendDecayAlertEmbed
};