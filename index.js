// index.js ‚Äì ARK ASE bot
require("dotenv").config();
const express = require("express");
const {
  Client,
  GatewayIntentBits,
  REST,
  Routes,
  SlashCommandBuilder,
  PermissionFlagsBits,
  Partials,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  StringSelectMenuBuilder,
  EmbedBuilder,
} = require("discord.js");
const decayService = require("./decayService");
const supabase = require("./supabase");
const { QuickDB } = require("quick.db");
const {
  joinVoiceChannel,
  createAudioPlayer,
  createAudioResource,
  StreamType,
  entersState,
  VoiceConnectionStatus,
  NoSubscriberBehavior,
  getVoiceConnection,
} = require("@discordjs/voice");
const ytdl = require("@distube/ytdl-core");
const ffmpeg = require("ffmpeg-static");
const { spawn } = require("child_process");

const db = new QuickDB();

/* ---------- KEEP-ALIVE ---------- */
const app = express();
const PORT = process.env.PORT || 3000;
app.get("/", (_, res) => res.send("‚úÖ Bot is running!"));
app.listen(PORT, () => console.log(`üåê Keep-alive server on ${PORT}`));

/* ---------- DISCORD BOT ---------- */
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildMessageReactions,
  ],
  partials: [Partials.Message, Partials.Channel, Partials.Reaction],
});

client.once("ready", () => {
  console.log(`‚úÖ Logged in as ${client.user.tag}`);

  client.user.setActivity("!help | /help", { type: 5 });
  // ch·∫°y check decay reminder m·ªói 1 ti·∫øng
  setInterval(() => decayService.checkDecayReminders(client), 1000 * 60 * 60);
  // refresh message decay m·ªói 1 ti·∫øng
  setInterval(() => decayService.updateDecayMessage(client), 1000 * 30);
});

/* ---------- XP ‚áÑ ROLE ---------- */
const levelRoles = {
  1: "1393347597359382723",
  10: "1393347839152750734",
  100: "1393347907972890754",
  999: "1393347979427057706",
};
const calcLevel = (xp) => Math.floor(0.1 * Math.sqrt(xp));

/* ---------- Audio player ---------- */
const player = createAudioPlayer({
  behaviors: { noSubscriber: NoSubscriberBehavior.Pause },
});

/* ---------- Slash Commands Register ---------- */
async function registerCommands() {
  const commands = [
    new SlashCommandBuilder()
      .setName("check_mutations")
      .setDescription("Ki·ªÉm tra k·∫øt qu·∫£ t√≠nh to√°n mutation v·ªõi gi·ªõi h·∫°n 32-bit")
      .addIntegerOption((opt) =>
        opt
          .setName("matrimutation")
          .setDescription("Nh·∫≠p gi√° tr·ªã MatriMutation")
          .setRequired(true)
      )
      .addIntegerOption((opt) =>
        opt
          .setName("patrimutation")
          .setDescription("Nh·∫≠p gi√° tr·ªã PatriMutation")
          .setRequired(true)
      ),

    new SlashCommandBuilder()
      .setName("help")
      .setDescription("Xem danh s√°ch l·ªánh"),

    new SlashCommandBuilder()
      .setName("userinfo")
      .setDescription("Xem th√¥ng tin c·ªßa 1 th√†nh vi√™n")
      .addUserOption((opt) =>
        opt
          .setName("target")
          .setDescription("Ch·ªçn th√†nh vi√™n")
          .setRequired(false)
      ),

    new SlashCommandBuilder()
      .setName("rank")
      .setDescription("Xem c·∫•p ƒë·ªô v√† XP c·ªßa b·∫°n ho·∫∑c ng∆∞·ªùi kh√°c")
      .addUserOption((opt) =>
        opt
          .setName("target")
          .setDescription("Ch·ªçn th√†nh vi√™n")
          .setRequired(false)
      ),

    new SlashCommandBuilder()
      .setName("top")
      .setDescription("Xem top 5 nhi·ªÅu XP nh·∫•t"),

    // new SlashCommandBuilder()
    //   .setName("play")
    //   .setDescription("Ph√°t nh·∫°c t·ª´ YouTube")
    //   .addStringOption((opt) =>
    //     opt.setName("url").setDescription("Link YouTube").setRequired(true)
    //   ),

    // new SlashCommandBuilder().setName("stop").setDescription("D·ª´ng nh·∫°c"),
  ].map((cmd) => cmd.toJSON());

  const rest = new REST({ version: "10" }).setToken(process.env.TOKEN);

  try {
    console.log("üîÑ ƒêang ƒëƒÉng k√Ω slash commands...");
    await rest.put(
      Routes.applicationGuildCommands(
        process.env.CLIENT_ID,
        "1168873250701443213"
      ),
      { body: commands }
    );
    console.log("‚úÖ Slash commands ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng!");
  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω:", error);
  }
}

registerCommands();

/* ---------- Interaction Handler ---------- */
client.on("interactionCreate", async (interaction) => {
  // üëâ X·ª≠ l√Ω Button tr∆∞·ªõc
  if (interaction.isButton()) {
    if (interaction.customId === "pause") {
      player.pause();
      return interaction.reply({ content: "‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng", ephemeral: true });
    }

    if (interaction.customId === "resume") {
      player.unpause();
      return interaction.reply({
        content: "‚ñ∂Ô∏è Ti·∫øp t·ª•c ph√°t",
        ephemeral: true,
      });
    }

    if (interaction.customId === "skip") {
      player.stop();
      return interaction.reply({ content: "‚è≠Ô∏è ƒê√£ skip", ephemeral: true });
    }

    if (interaction.customId === "queue") {
      return interaction.reply({
        content: "üìÉ Queue hi·ªán ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t",
        ephemeral: true,
      });
    }
    if (interaction.customId === "view_my_decay") {
      const userId = interaction.user.id;
      const decays = await decayService.getUserDecays(userId);
      const byMap = Object.fromEntries(decays.map((d) => [d.map_name, d]));

      // üé® Header
      let description = `**üîÅ Decay c·ªßa ${interaction.user.username}**\n*C·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c*\n\n`;

      // üß± T·∫°o danh s√°ch ‚Äú√¥ box‚Äù
      for (const map of decayService.MAPS) {
        const record = byMap[map];
        let line;
        if (!record) {
          line = `> üó∫Ô∏è **${map}**\n> \`‚ö´ Ch∆∞a thi·∫øt l·∫≠p\``;
        } else {
          const end =
            new Date(record.start_time).getTime() +
            record.decay_days * 86400000;
          const leftMs = end - Date.now();
          const leftDays = Math.max(0, Math.floor(leftMs / 86400000));
          const leftHours = Math.max(
            0,
            Math.floor((leftMs % 86400000) / 3600000)
          );

          if (leftMs <= 0) {
            line = `> üó∫Ô∏è **${map}**\n> \`üî¥ ƒê√£ h·∫øt h·∫°n decay\``;
          } else if (leftDays <= 1) {
            line = `> üó∫Ô∏è **${map}**\n> \`üü† C√≤n ${leftDays} ng√†y ${leftHours} gi·ªù\``;
          } else {
            line = `> üó∫Ô∏è **${map}**\n> \`üü¢ C√≤n ${leftDays} ng√†y ${leftHours} gi·ªù\``;
          }
        }
        description += line + "\n\n";
      }

      // üßæ Embed ƒë·∫πp
      const embed = new EmbedBuilder()
        .setColor(0x2b2d31)
        .setTitle("üîÅ Decay c·ªßa b·∫°n")
        .setDescription(description)
        .setThumbnail(interaction.user.displayAvatarURL())
        .setTimestamp()
        .setFooter({
          text: "D·ªØ li·ªáu ri√™ng t∆∞ ‚Äî ch·ªâ b·∫°n th·∫•y",
          iconURL: client.user.displayAvatarURL(),
        });

      // üß© T·∫°o n√∫t Reset ri√™ng cho t·ª´ng map m√† user c√≥
      const userMaps = decays.map((d) => d.map_name);
      const buttons = userMaps.map((map) =>
        new ButtonBuilder()
          .setCustomId(`reset_map:${map}`)
          .setLabel(`Reset ${map}`)
          .setStyle(ButtonStyle.Secondary)
      );

      // chia th√†nh h√†ng, m·ªói h√†ng t·ªëi ƒëa 5 n√∫t
      const rows = [];
      for (let i = 0; i < buttons.length; i += 5) {
        rows.push(
          new ActionRowBuilder().addComponents(...buttons.slice(i, i + 5))
        );
      }

      await interaction.reply({
        embeds: [embed],
        components: rows,
        ephemeral: true,
      });

      return;
    }

    if (interaction.customId === "add_decay") {
      // show select menu of maps to add
      const options = decayService.MAPS.map((m) => ({ label: m, value: m }));
      const select = new StringSelectMenuBuilder()
        .setCustomId("add_decay_select")
        .setPlaceholder("Ch·ªçn map ƒë·ªÉ add check decay")
        .addOptions(options);
      await interaction.reply({
        content: "Ch·ªçn map b·∫°n mu·ªën add:",
        components: [new ActionRowBuilder().addComponents(select)],
        ephemeral: true,
      });
      return;
    }

    if (interaction.customId === "edit_decay") {
      // show select of user's maps (only maps they added)
      const decays = await decayService.getUserDecays(interaction.user.id);
      if (!decays.length)
        return interaction.reply({
          content: "B·∫°n ch∆∞a add map n√†o ƒë·ªÉ edit.",
          ephemeral: true,
        });
      const options = decays.map((d) => ({
        label: `${d.map_name} ‚Äî ${d.decay_days} ng√†y`,
        value: d.map_name,
      }));
      const select = new StringSelectMenuBuilder()
        .setCustomId("edit_decay_select")
        .setPlaceholder("Ch·ªçn map ƒë·ªÉ edit")
        .addOptions(options);
      await interaction.reply({
        content: "Ch·ªçn map ƒë·ªÉ ch·ªânh th·ªùi gian:",
        components: [new ActionRowBuilder().addComponents(select)],
        ephemeral: true,
      });
      return;
    }

    if (interaction.customId === "delete_decay") {
      const decays = await decayService.getUserDecays(interaction.user.id);
      if (!decays.length)
        return interaction.reply({
          content: "B·∫°n ch∆∞a add map n√†o ƒë·ªÉ x√≥a.",
          ephemeral: true,
        });
      const options = decays.map((d) => ({
        label: `${d.map_name} ‚Äî ${d.decay_days} ng√†y`,
        value: d.map_name,
      }));
      const select = new StringSelectMenuBuilder()
        .setCustomId("delete_decay_select")
        .setPlaceholder("Ch·ªçn map ƒë·ªÉ x√≥a")
        .addOptions(options);
      await interaction.reply({
        content: "Ch·ªçn map ƒë·ªÉ x√≥a:",
        components: [new ActionRowBuilder().addComponents(select)],
        ephemeral: true,
      });
      return;
    }

    // reset click: customId = reset_map:<map>
    if (interaction.customId && interaction.customId.startsWith("reset_map:")) {
      const mapName = interaction.customId.split(":")[1];
      try {
        await decayService.resetDecay(interaction.user.id, mapName);
        await interaction.reply({
          content: `‚úÖ ƒê√£ reset th·ªùi gian decay cho ${mapName}`,
          ephemeral: true,
        });
      } catch (err) {
        console.error(err);
        await interaction.reply({
          content: `‚ùå L·ªói khi reset ${mapName}`,
          ephemeral: true,
        });
      }
      return;
    }
  }
  if (interaction.isStringSelectMenu()) {
    if (interaction.customId === "add_decay_select") {
      const mapName = interaction.values[0];
      // show modal to receive days
      const modal = new ModalBuilder()
        .setCustomId(`add_decay_modal:${mapName}`)
        .setTitle(`Add decay - ${mapName}`)
        .addComponents(
          new ActionRowBuilder().addComponents(
            new TextInputBuilder()
              .setCustomId("decay_days")
              .setLabel("S·ªë ng√†y decay (v√≠ d·ª• 45)")
              .setStyle(TextInputStyle.Short)
              .setRequired(true)
          )
        );
      await interaction.showModal(modal);
      return;
    }

    if (interaction.customId === "edit_decay_select") {
      const mapName = interaction.values[0];
      const modal = new ModalBuilder()
        .setCustomId(`edit_decay_modal:${mapName}`)
        .setTitle(`Edit decay - ${mapName}`)
        .addComponents(
          new ActionRowBuilder().addComponents(
            new TextInputBuilder()
              .setCustomId("decay_days")
              .setLabel("S·ªë ng√†y decay m·ªõi (v√≠ d·ª• 45)")
              .setStyle(TextInputStyle.Short)
              .setRequired(true)
          )
        );
      await interaction.showModal(modal);
      return;
    }

    if (interaction.customId === "delete_decay_select") {
      const mapName = interaction.values[0];
      // confirm delete with a button
      const confirm = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId(`confirm_delete:${mapName}`)
          .setLabel(`X√°c nh·∫≠n x√≥a ${mapName}`)
          .setStyle(ButtonStyle.Danger)
      );
      await interaction.reply({
        content: `B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a decay cho ${mapName}?`,
        components: [confirm],
        ephemeral: true,
      });
      return;
    }
  }

  // MODAL submit
  if (interaction.isModalSubmit()) {
    if (
      interaction.customId &&
      interaction.customId.startsWith("add_decay_modal:")
    ) {
      const mapName = interaction.customId.split(":")[1];
      const days = parseInt(
        interaction.fields.getTextInputValue("decay_days"),
        10
      );
      if (Number.isNaN(days) || days <= 0)
        return interaction.reply({
          content: "S·ªë ng√†y kh√¥ng h·ª£p l·ªá.",
          ephemeral: true,
        });
      try {
        await decayService.addOrResetDecay(
          interaction.user.id,
          interaction.user.username,
          mapName,
          days
        );
        await interaction.reply({
          content: `‚úÖ ƒê√£ th√™m ${mapName} v·ªõi ${days} ng√†y`,
          ephemeral: true,
        });
      } catch (err) {
        console.error(err);
        await interaction.reply({
          content: "‚ùå L·ªói khi th√™m decay",
          ephemeral: true,
        });
      }
      return;
    }

    if (
      interaction.customId &&
      interaction.customId.startsWith("edit_decay_modal:")
    ) {
      const mapName = interaction.customId.split(":")[1];
      const days = parseInt(
        interaction.fields.getTextInputValue("decay_days"),
        10
      );
      if (Number.isNaN(days) || days <= 0)
        return interaction.reply({
          content: "S·ªë ng√†y kh√¥ng h·ª£p l·ªá.",
          ephemeral: true,
        });
      try {
        await decayService.editDecay(interaction.user.id, mapName, days);
        await interaction.reply({
          content: `‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${mapName} -> ${days} ng√†y`,
          ephemeral: true,
        });
      } catch (err) {
        console.error(err);
        await interaction.reply({
          content: "‚ùå L·ªói khi edit decay",
          ephemeral: true,
        });
      }
      return;
    }
  }

    // CONFIRM delete button
  if (
    interaction.isButton() &&
    interaction.customId &&
    interaction.customId.startsWith("confirm_delete:")
  ) {
    const mapName = interaction.customId.split(":")[1];
    try {
      await decayService.deleteDecay(interaction.user.id, mapName);
      await interaction.reply({
        content: `‚úÖ ƒê√£ x√≥a decay cho ${mapName}`,
        ephemeral: true,
      });
    } catch (err) {
      console.error(err);
      await interaction.reply({ content: "‚ùå L·ªói khi x√≥a", ephemeral: true });
    }
    return;
  }

  // üëâ Ch·ªâ x·ª≠ l√Ω Slash Command n·∫øu l√† Chat Input
  if (!interaction.isChatInputCommand()) return;

  if (interaction.commandName === "help") {
    await interaction.reply(
      "üìú C√°c l·ªánh: `/help`, `/userinfo`, `/rank`, `/top`, `/play`, `/stop`"
    );
  }

  if (interaction.commandName === "userinfo") {
    const user = interaction.options.getUser("target") || interaction.user;
    const member = await interaction.guild.members.fetch(user.id);
    await interaction.reply({
      embeds: [
        {
          title: `Th√¥ng tin c·ªßa ${user.username}`,
          fields: [
            { name: "ID", value: user.id, inline: true },
            {
              name: "Ng√†y tham gia server",
              value: `<t:${Math.floor(member.joinedTimestamp / 1000)}:R>`,
              inline: true,
            },
            {
              name: "Ng√†y t·∫°o t√†i kho·∫£n",
              value: `<t:${Math.floor(user.createdTimestamp / 1000)}:R>`,
              inline: true,
            },
          ],
          thumbnail: { url: user.displayAvatarURL({ size: 1024 }) },
          color: 0x00ae86,
        },
      ],
    });
  }

  if (interaction.commandName === "rank") {
    const target = interaction.options.getUser("target") || interaction.user;
    const xp = (await db.get(`xp_${interaction.guildId}_${target.id}`)) || 0;
    const level = calcLevel(xp);
    await interaction.reply(
      `üéñÔ∏è ${target.username} ƒëang ·ªü c·∫•p **${level}** v·ªõi **${xp} üçÄ**`
    );
  }

  if (interaction.commandName === "top") {
    const all = await db.all();
    const top = all
      .filter((d) => d.id.startsWith(`xp_${interaction.guildId}_`))
      .sort((a, b) => b.value - a.value)
      .slice(0, 5);

    const list = await Promise.all(
      top.map(async (d, i) => {
        const uid = d.id.split("_")[2];
        let name;
        try {
          const m = await interaction.guild.members.fetch(uid);
          name = m.displayName || m.user.tag;
        } catch {
          name = `User ${uid}`;
        }
        return `**#${i + 1}** ${name} ‚Äì ${d.value} üçÄ`;
      })
    );
    await interaction.reply(`üèÜ **Top 5 nhi·ªÅu XP nh·∫•t**\n${list.join("\n")}`);
  }

  // if (interaction.commandName === "play") {
  //   const url = interaction.options.getString("url");
  //   const channel = interaction.member.voice.channel;
  //   if (!channel) return interaction.reply("‚ùå B·∫°n ph·∫£i v√†o k√™nh tho·∫°i tr∆∞·ªõc!");

  //   const connection = joinVoiceChannel({
  //     channelId: channel.id,
  //     guildId: interaction.guild.id,
  //     adapterCreator: interaction.guild.voiceAdapterCreator,
  //   });

  //   try {
  //     const stream = ytdl(url, {
  //       filter: "audioonly",
  //       quality: "highestaudio",
  //       highWaterMark: 1 << 25,
  //     });
  //     const resource = createAudioResource(stream, {
  //       inputType: StreamType.Arbitrary,
  //     });

  //     player.play(resource);
  //     connection.subscribe(player);

  //     await entersState(connection, VoiceConnectionStatus.Ready, 20e3);

  //     const info = await ytdl.getInfo(url);
  //     const embed = {
  //       color: 0x1db954,
  //       title: `üéµ ƒêang ph√°t`,
  //       description: `[${info.videoDetails.title}](${url})`,
  //       thumbnail: { url: info.videoDetails.thumbnails[0].url },
  //       fields: [
  //         { name: "K√™nh", value: info.videoDetails.author.name, inline: true },
  //         {
  //           name: "Th·ªùi l∆∞·ª£ng",
  //           value: `${Math.floor(info.videoDetails.lengthSeconds / 60)} ph√∫t`,
  //           inline: true,
  //         },
  //       ],
  //       footer: {
  //         text: `Y√™u c·∫ßu b·ªüi ${interaction.user.username}`,
  //         icon_url: interaction.user.displayAvatarURL(),
  //       },
  //       timestamp: new Date(),
  //     };

  //     const row = new ActionRowBuilder().addComponents(
  //       new ButtonBuilder()
  //         .setCustomId("pause")
  //         .setLabel("‚è∏Ô∏è Pause")
  //         .setStyle(ButtonStyle.Secondary),
  //       new ButtonBuilder()
  //         .setCustomId("resume")
  //         .setLabel("‚ñ∂Ô∏è Resume")
  //         .setStyle(ButtonStyle.Success),
  //       new ButtonBuilder()
  //         .setCustomId("skip")
  //         .setLabel("‚è≠Ô∏è Skip")
  //         .setStyle(ButtonStyle.Primary),
  //       new ButtonBuilder()
  //         .setCustomId("queue")
  //         .setLabel("üìÉ Queue")
  //         .setStyle(ButtonStyle.Secondary)
  //     );

  //     await interaction.reply({ embeds: [embed], components: [row] });
  //   } catch (err) {
  //     console.error(err);
  //     await interaction.reply("‚ùå Kh√¥ng th·ªÉ ph√°t nh·∫°c t·ª´ link n√†y.");
  //   }
  // }

  // if (interaction.commandName === "stop") {
  //   const conn = getVoiceConnection(interaction.guild.id);
  //   if (!conn) return interaction.reply("Bot kh√¥ng ·ªü k√™nh tho·∫°i.");
  //   conn.destroy();
  //   return interaction.reply("‚èπÔ∏è ƒê√£ d·ª´ng nh·∫°c.");
  // }

  if (interaction.commandName === "check_mutations") {
    const matri = interaction.options.getInteger("matrimutation");
    const patri = interaction.options.getInteger("patrimutation");

    const INT32_MAX = 2147483647;
    const INT32_MIN = -2147483648;

    let sum = matri + patri;
    let result;

    if (sum > INT32_MAX) {
      result = INT32_MIN - (sum - INT32_MAX + 1);
    } else if (sum < INT32_MIN) {
      result = INT32_MAX + 1 + (sum - INT32_MIN);
    } else {
      result = sum;
    }
    // üëâ X√°c ƒë·ªãnh Mut D∆∞∆°ng hay Mut √Çm
    const mutType = result >= 0 ? "‚òÄÔ∏è Mut D∆∞∆°ng" : "üåë Mut √Çm";

    // üëâ H√†m t√≠nh t·ª∑ l·ªá mutation trong ARK
    function calcMutationRate(matri, patri) {
      if (matri < 0) matri = 0;
      if (patri < 0) patri = 0;

      const rolls = 3;
      const chancePerRoll = 0.025;

      let effectiveRate;

      if (matri >= 20 && patri >= 20) {
        effectiveRate = 0; // c·∫£ 2 full
      } else if (matri >= 20 || patri >= 20) {
        effectiveRate = (1 - Math.pow(1 - chancePerRoll, rolls)) / 2;
      } else {
        effectiveRate = 1 - Math.pow(1 - chancePerRoll, rolls);
      }

      return (effectiveRate * 100).toFixed(2); // %
    }
    const mutationRate = calcMutationRate(matri, patri);
    // üëâ Embed tr·∫£ v·ªÅ
    return interaction.reply({
      embeds: [
        {
          title: "üß¨ K·∫øt qu·∫£ Check Mutations",
          color: result >= 0 ? 0x2ecc71 : 0xe74c3c, // xanh n·∫øu d∆∞∆°ng, ƒë·ªè n·∫øu √¢m
          fields: [
            { name: "MatriMutation", value: `\`${matri}\``, inline: true },
            { name: "PatriMutation", value: `\`${patri}\``, inline: true },
            // { name: "T·ªïng", value: `\`${sum}\``, inline: true },
            { name: "K·∫øt qu·∫£", value: `**${result}**`, inline: true },
            { name: "Lo·∫°i Mutation", value: mutType, inline: true },
            { name: "T·ª∑ l·ªá Mutation", value: `${mutationRate}%`, inline: true },
          ],
          footer: { text: `Gi·ªõi h·∫°n int32: t·ª´ ${INT32_MIN} ƒë·∫øn ${INT32_MAX}` },
          timestamp: new Date(),
        },
      ],
    });
  }
});

/* ---------- XP khi chat b√¨nh th∆∞·ªùng ---------- */
client.on("messageCreate", async (msg) => {
  if (msg.author.bot) return;
  if (!msg.content.startsWith("!")) {
    const key = `xp_${msg.guildId}_${msg.author.id}`;
    let xp = (await db.get(key)) || 0;
    xp += 10;
    await db.set(key, xp);

    const old = calcLevel(xp - 10),
      lvl = calcLevel(xp);
    if (lvl > old) {
      msg.channel.send(`üéâ <@${msg.author.id}> ƒë√£ l√™n c·∫•p **${lvl}**!`);
      const target = Object.keys(levelRoles)
        .map(Number)
        .sort((a, b) => b - a)
        .filter((l) => lvl >= l)
        .pop();
      if (target) {
        const member = await msg.guild.members.fetch(msg.author.id);
        for (const id of Object.values(levelRoles))
          if (id !== levelRoles[target] && member.roles.cache.has(id))
            await member.roles.remove(id).catch(() => {});
        if (!member.roles.cache.has(levelRoles[target]))
          await member.roles.add(levelRoles[target]).catch(() => {});
      }
    }
  }
});
/* ---------- Auto role cho th√†nh vi√™n m·ªõi ---------- */
client.on("guildMemberAdd", async (member) => {
  try {
    console.log(`üëã Th√†nh vi√™n m·ªõi: ${member.user.tag} (ID: ${member.id})`);

    const roleId = "1415665328943530025"; // ID role Server Tag
    const role = member.guild.roles.cache.get(roleId);

    if (!role) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y role Server Tag!");
      return;
    }

    await member.roles.add(role);
    console.log(`‚úÖ ƒê√£ g√°n role ${role.name} cho ${member.user.tag}`);
  } catch (err) {
    console.error("‚ùå L·ªói khi g√°n role:", err);
  }
});
/* ---------- Reaction Role ---------- */
const reactionRoles = {
  "1415421191073562654": "1397120911215296583", // <:Aquatica:1415411111111111> -> role Aquatica
  "üß¨": "1392079828957528074", // emoji m·∫∑c ƒë·ªãnh üß¨ -> role Breeding
};

const reactionMessageId = "1211334614623461426"; // ID message c√≥ reaction

client.on("messageReactionAdd", async (reaction, user) => {
  if (reaction.partial) await reaction.fetch(); // üëà c·∫ßn n·∫øu d√πng partials
  if (reaction.message.id !== reactionMessageId) return;
  if (user.bot) return;

  const key = reaction.emoji.id || reaction.emoji.name;
  console.log("‚û°Ô∏è Emoji click:", key); // üëà debug
  const roleId = reactionRoles[key];
  if (!roleId) return;

  const member = await reaction.message.guild.members.fetch(user.id);
  await member.roles.add(roleId).catch(console.error);
  console.log(`‚úÖ ƒê√£ g√°n role ${roleId} cho ${user.tag}`);
});

client.on("messageReactionRemove", async (reaction, user) => {
  if (reaction.partial) await reaction.fetch();
  if (reaction.message.id !== reactionMessageId) return;
  if (user.bot) return;

  const key = reaction.emoji.id || reaction.emoji.name;
  console.log("‚û°Ô∏è Emoji remove:", key);
  const roleId = reactionRoles[key];
  if (!roleId) return;

  const member = await reaction.message.guild.members.fetch(user.id);
  await member.roles.remove(roleId).catch(console.error);
  console.log(`‚ùå ƒê√£ g·ª° role ${roleId} kh·ªèi ${user.tag}`);
});

/* ---------- Auto Role Breeding ---------- */
client.on("guildMemberUpdate", async (oldMember, newMember) => {
  const roleBreedBasic = "1392079828957528074"; // breed basic
  const roleBreeding = "1415707578029047970"; // breeding

  try {
    // Khi th√†nh vi√™n m·ªõi nh·∫≠n ƒë∆∞·ª£c role breed basic
    if (
      !oldMember.roles.cache.has(roleBreedBasic) &&
      newMember.roles.cache.has(roleBreedBasic)
    ) {
      // N·∫øu ch∆∞a c√≥ role breeding th√¨ th√™m v√†o
      if (!newMember.roles.cache.has(roleBreeding)) {
        await newMember.roles.add(roleBreeding);
        console.log(`‚úÖ ƒê√£ th√™m role Breeding cho ${newMember.user.tag}`);
      }
    }
  } catch (err) {
    console.error("‚ùå L·ªói khi auto th√™m role breeding:", err);
  }
});

client.login(process.env.TOKEN);

// check-decay service
client.once("ready", async () => {
  console.log(`‚úÖ Logged in as ${client.user.tag}`);
  client.user.setActivity("ARK Aquatica ASE", { type: 0 });

  // ========== POST/UPDATE PUBLIC CHECK-DECAY MESSAGE ==========
  const channelId = process.env.NEWS_CHECKDECAY_ID;
  if (!channelId) {
    console.warn(
      "‚ö†Ô∏è Ch∆∞a c√≥ NEWS_CHECKDECAY_ID trong .env ‚Äî skip check-decay message."
    );
    return;
  }

  try {
    const channel = await client.channels.fetch(channelId);

    // üß≠ T·∫°o embed ‚Äú√¥ box‚Äù ƒë·∫πp ngay t·ª´ l√∫c kh·ªüi t·∫°o
    let description = `**üìã Decay list c·ªßa <@680726526010064899>**\n*C·∫≠p nh·∫≠t t·ª± ƒë·ªông m·ªói 30s*\n\n`;

    const boxList = decayService.MAPS.map((map) => {
      return `> üó∫Ô∏è **${map}**\n> \`‚ö´ Ch∆∞a thi·∫øt l·∫≠p\``;
    }).join("\n\n");

    description += boxList;

    const embed = new EmbedBuilder()
      .setColor(0x1e1f22)
      .setTitle("üõ°Ô∏è Check Decay - Overview")
      .setDescription(description)
      .setThumbnail("https://cdn-icons-png.flaticon.com/512/561/561611.png")
      .setTimestamp()
      .setFooter({
        text: "Brought to you by Kalendell ‚Ä¢ c·∫≠p nh·∫≠t t·ª± ƒë·ªông",
        iconURL: client.user.displayAvatarURL(),
      });

    // üîò N√∫t ch·ª©c nƒÉng
    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId("view_my_decay")
        .setLabel("Hi·ªÉn th·ªã check decay c·ªßa b·∫°n")
        .setStyle(ButtonStyle.Primary),
      new ButtonBuilder()
        .setCustomId("add_decay")
        .setLabel("Add check decay")
        .setStyle(ButtonStyle.Success),
      new ButtonBuilder()
        .setCustomId("edit_decay")
        .setLabel("Edit check decay")
        .setStyle(ButtonStyle.Secondary),
      new ButtonBuilder()
        .setCustomId("delete_decay")
        .setLabel("Delete decay")
        .setStyle(ButtonStyle.Danger)
    );

    // üíæ L∆∞u / c·∫≠p nh·∫≠t message ID trong Supabase
    const botMessage = await decayService.getBotMessageRow(
      "check_decay_message"
    );
    if (botMessage && botMessage.message_id) {
      try {
        const old = await channel.messages.fetch(botMessage.message_id);
        await old.edit({ embeds: [embed], components: [row] });
      } catch (err) {
        const sent = await channel.send({ embeds: [embed], components: [row] });
        await decayService.upsertBotMessage(
          "check_decay_message",
          channelId,
          sent.id
        );
      }
    } else {
      const sent = await channel.send({ embeds: [embed], components: [row] });
      await decayService.upsertBotMessage(
        "check_decay_message",
        channelId,
        sent.id
      );
    }
  } catch (err) {
    console.error("‚ùå L·ªói khi post/update check-decay message:", err);
  }
});