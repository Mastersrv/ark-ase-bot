// decayServiceASA.js
const supabase = require("./supabase");
const {
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  StringSelectMenuBuilder,
  TextInputBuilder,
  TextInputStyle,
  ModalBuilder,
} = require("discord.js");

/* ==========================
   MAP LIST ASA
========================== */
const ASA_MAPS = [
  "THEISLAND",
  "THECENTER",
  "RAGNAROK",
  "EXTINCTION",
  "ABERRATION",
  "ASTRAEOS",
  "SCORCHEDEARTH",
  "MAP KH√ÅC",
];

/* ==========================
   USER MANAGEMENT
========================== */
async function ensureUserASA(userId, username = "") {
  const { data, error } = await supabase
    .from("users_asa")
    .select("*")
    .eq("id", userId)
    .single();
  if (error && error.code !== "PGRST116") throw error;

  if (!data) {
    await supabase.from("users_asa").insert({ id: userId, username });
  } else if (username && data.username !== username) {
    await supabase.from("users_asa").update({ username }).eq("id", userId);
  }
}

/* ==========================
   CRUD FUNCTIONS
========================== */
async function addOrResetDecayASA(
  userId,
  username,
  mapName,
  decayDays,
  mapLabel = null
) {
  await ensureUserASA(userId, username);

  // ki·ªÉm tra gi·ªõi h·∫°n 20 map / user
  const { data: existing } = await supabase
    .from("decays_asa")
    .select("*")
    .eq("user_id", userId);

  if (existing && existing.length >= 20)
    throw new Error("B·∫°n ch·ªâ c√≥ th·ªÉ add t·ªëi ƒëa 20 map!");

  // ‚úÖ ki·ªÉm tra tr√πng map_name + map_label
  const duplicate = existing.find(
    (d) =>
      d.map_name === mapName &&
      (d.map_label || "").toLowerCase() === (mapLabel || "").toLowerCase()
  );

  if (duplicate) {
    throw new Error(
      `‚ö†Ô∏è Map **${mapName}${mapLabel ? " - " + mapLabel : ""}** ƒë√£ t·ªìn t·∫°i!`
    );
  }

  const { error } = await supabase.from("decays_asa").insert({
    user_id: userId,
    map_name: mapName,
    map_label: mapLabel,
    decay_days: decayDays,
    start_time: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  });

  if (error) throw error;
  return true;
}

async function editDecayASA(userId, mapName, newDays) {
  const { error } = await supabase
    .from("decays_asa")
    .update({
      decay_days: newDays,
      updated_at: new Date().toISOString(),
    })
    .eq("user_id", userId)
    .eq("map_name", mapName);

  if (error) throw error;
}

async function deleteDecayASA(userId, mapName, mapLabel = null) {
  let query = supabase
    .from("decays_asa")
    .delete()
    .eq("user_id", userId)
    .eq("map_name", mapName);
  if (mapLabel) query = query.eq("map_label", mapLabel);
  const { error } = await query;
  if (error) throw error;
}

async function resetDecayASA(userId, mapName, mapLabel = null) {
  let query = supabase
    .from("decays_asa")
    .update({
      start_time: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    })
    .eq("user_id", userId)
    .eq("map_name", mapName);

  if (mapLabel) query = query.eq("map_label", mapLabel);

  const { error } = await query;
  if (error) throw error;
}

/* Reset ALL map ƒë√£ th√™m */
async function resetAllDecaysASA(userId) {
  const { error } = await supabase
    .from("decays_asa")
    .update({
      start_time: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    })
    .eq("user_id", userId);

  if (error) throw error;
}

/* ==========================
   GET FUNCTIONS
========================== */
async function getUserDecaysASA(userId) {
  const { data, error } = await supabase
    .from("decays_asa")
    .select("*")
    .eq("user_id", userId)
    .order("updated_at", { ascending: false });
  if (error) throw error;
  return data || [];
}

/* ==========================
   EMBED DISPLAY
========================== */
async function buildDecayListEmbed(user, decays) {
  let desc = `**üîÅ Decay list c·ªßa ${user.username}**\n*C·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c*\n\n`;

  if (decays.length === 0) {
    desc += "> ‚ùå Ch∆∞a add map n√†o.\nD√πng n√∫t **Add check decay** ƒë·ªÉ b·∫Øt ƒë·∫ßu.";
  } else {
    for (const d of decays) {
      const end =
        new Date(d.start_time).getTime() + d.decay_days * 24 * 60 * 60 * 1000;
      const leftMs = end - Date.now();
      const leftDays = Math.max(0, Math.floor(leftMs / 86400000));
      const leftHours = Math.max(0, Math.floor((leftMs % 86400000) / 3600000));

      let status;
      if (leftMs <= 0) status = `üî¥ **ƒê√£ h·∫øt h·∫°n decay**`;
      else if (leftDays <= 1)
        status = `üü† **C√≤n ${leftDays} ng√†y ${leftHours} gi·ªù**`;
      else status = `üü¢ **C√≤n ${leftDays} ng√†y ${leftHours} gi·ªù**`;

      const mapTitle = d.map_label
        ? `${d.map_name} - ${d.map_label}`
        : d.map_name;
      desc += `> üó∫Ô∏è **${mapTitle}**\n> \`${status.replace(/\*/g, "")}\`\n\n`;
    }
  }

  return new EmbedBuilder()
    .setColor(0x2b2d31)
    .setTitle("üß≠ Check Decay - ASA")
    .setDescription(desc)
    .setThumbnail(user.displayAvatarURL())
    .setTimestamp()
    .setFooter({
      text: "D·ªØ li·ªáu ri√™ng t∆∞ ‚Äî ch·ªâ b·∫°n th·∫•y",
      iconURL: user.displayAvatarURL(),
    });
}

/* ==========================
   CHECK REMINDER (T·ª∞ ƒê·ªòNG)
========================== */
async function checkDecayRemindersASA(client) {
  const { data: decays, error } = await supabase.from("decays_asa").select("*");
  if (error) {
    console.error("L·ªói l·∫•y d·ªØ li·ªáu decay ASA:", error);
    return;
  }

  for (const d of decays) {
  const end = new Date(d.start_time).getTime() + d.decay_days * 24 * 60 * 60 * 1000;
  const leftMs = end - Date.now();
  const leftDays = Math.max(0, Math.floor(leftMs / (24 * 3600 * 1000)));
  const leftHours = Math.max(0, Math.floor((leftMs % (24 * 3600 * 1000)) / (3600 * 1000)));

  // G·ª≠i c·∫£nh b√°o khi c√≤n 3, 2, 1 ng√†y v√† ch∆∞a g·ª≠i cho m·ªëc n√†y
  if ([3, 2, 1].includes(leftDays) && d.last_notified_days !== leftDays) {
    try {
      const user = await client.users.fetch(d.user_id).catch(() => null);
      if (!user) continue;

      // üß± G·ªçi embed chuy√™n nghi·ªáp
      await sendDecayAlertEmbed(
        client,
        user,
        d.map_name,
        d.map_label,
        leftDays,
        leftHours,
        "ASA"
      );

      // ‚úÖ C·∫≠p nh·∫≠t m·ªëc ƒë√£ g·ª≠i ƒë·ªÉ kh√¥ng b·ªã spam
      await supabase
        .from("decays_asa")
        .update({ last_notified_days: leftDays })
        .eq("id", d.id);

    } catch (err) {
      console.error("‚ùå L·ªói khi g·ª≠i c·∫£nh b√°o ASA:", err);
    }
  }
}

}

/* ==========================
   UPDATE CHECK DECAY OVERVIEW
========================== */
/**
 * T·∫°o / ƒë·∫£m b·∫£o t·ªìn t·∫°i 1 message overview ASA duy nh·∫•t.
 * Key d√πng trong b·∫£ng bot_messages_asa: 'overview_asa'
 */
async function ensureOverviewMessage(client) {
  const channelId = process.env.NEWS_CHECKDECAY_ID_ASA;
  if (!channelId) return console.warn("‚ö†Ô∏è Ch∆∞a c√≥ NEWS_CHECKDECAY_ID_ASA trong .env ‚Äî skip ensureOverviewMessage.");

  const channel = await client.channels.fetch(channelId).catch((e) => {
    console.error("‚ùå Kh√¥ng fetch ƒë∆∞·ª£c channel ASA overview:", e);
    return null;
  });
  if (!channel) return;

  // T·∫°o embed hi·ªán t·∫°i (d·ª±a tr√™n owner)
  const ownerId = process.env.OWNER_ID_ASA;
  const { data: decays } = await supabase
    .from("decays_asa")
    .select("*")
    .eq("user_id", ownerId);
  const embed = buildOverviewEmbedFromOwner(client, ownerId, decays || []);


  // L·∫•y record trong bot_messages_asa v·ªõi key 'overview_asa'
  const { data: rows, error: fetchErr } = await supabase
    .from("bot_messages_asa")
    .select("*")
    .eq("key", "overview_asa");

  if (fetchErr) {
    console.error("‚ùå L·ªói khi ƒë·ªçc bot_messages_asa:", fetchErr);
    return;
  }

  const row = rows && rows.length ? rows[0] : null;

  try {
    if (row && row.message_id) {
      // n·∫øu message t·ªìn t·∫°i, th·ª≠ edit
      const msg = await channel.messages.fetch(row.message_id).catch(() => null);
      if (msg) {
        await msg.edit({ embeds: [embed] });
        console.log("‚úÖ ensureOverviewMessage: ƒê√£ c·∫≠p nh·∫≠t message overview ASA hi·ªán c√≥.");
        return;
      }
    }

    // n·∫øu kh√¥ng c√≥ row ho·∫∑c message kh√¥ng t√¨m th·∫•y => g·ª≠i m·ªõi + upsert v√†o DB
    const sent = await channel.send({ embeds: [embed] });
    await supabase
      .from("bot_messages_asa")
      .upsert({
        key: "overview_asa",
        channel_id: channelId,
        message_id: sent.id,
        updated_at: new Date().toISOString(),
      });
    console.log("üÜï ensureOverviewMessage: ƒê√£ t·∫°o message overview ASA m·ªõi v√† l∆∞u v√†o DB.");
  } catch (err) {
    console.error("‚ùå L·ªói ensureOverviewMessage:", err);
  }
}

async function updateDecayOverview(client) {
  const channelId = process.env.NEWS_CHECKDECAY_ID_ASA;
  if (!channelId)
    return console.warn("‚ö†Ô∏è Ch∆∞a c√≥ NEWS_CHECKDECAY_ID_ASA trong .env ‚Äî skip updateDecayOverview.");

  const channel = await client.channels.fetch(channelId).catch((e) => {
    console.error("‚ùå Kh√¥ng fetch ƒë∆∞·ª£c channel ASA overview:", e);
    return null;
  });
  if (!channel) return;

  const ownerId = process.env.OWNER_ID_ASA;
  const { data: decays, error: decayErr } = await supabase
    .from("decays_asa")
    .select("*")
    .eq("user_id", ownerId);

  if (decayErr) {
    console.error("‚ùå L·ªói khi l·∫•y decays ASA:", decayErr);
    return;
  }

  const embed = buildOverviewEmbedFromOwner(client, ownerId, decays || []);


  // üîò N√∫t thao t√°c (buttons)
  const rowComponents = new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId("view_my_decay_asa")
      .setLabel("Hi·ªÉn th·ªã check decay ASA c·ªßa b·∫°n")
      .setStyle(ButtonStyle.Primary),
    new ButtonBuilder()
      .setCustomId("add_decay_asa")
      .setLabel("Add check decay ASA")
      .setStyle(ButtonStyle.Success),
    new ButtonBuilder()
      .setCustomId("edit_decay_asa")
      .setLabel("Edit check decay ASA")
      .setStyle(ButtonStyle.Secondary),
    new ButtonBuilder()
      .setCustomId("delete_decay_asa")
      .setLabel("Delete decay ASA")
      .setStyle(ButtonStyle.Danger)
  );

  // L·∫•y message_id t·ª´ bot_messages_asa
  const { data: rows, error: fetchErr } = await supabase
    .from("bot_messages_asa")
    .select("*")
    .eq("key", "overview_asa");

  if (fetchErr) {
    console.error("‚ùå L·ªói khi ƒë·ªçc bot_messages_asa:", fetchErr);
    return;
  }

  const row = rows && rows.length ? rows[0] : null;

  try {
    if (row && row.message_id) {
      const msg = await channel.messages.fetch(row.message_id).catch(() => null);
      if (msg) {
        await msg.edit({
          embeds: [embed],
          components: [rowComponents],
        });
        // console.log("‚úÖ updateDecayOverview: updated existing overview message.");
        return;
      }
    }

    // n·∫øu kh√¥ng t√¨m th·∫•y message (row c≈©), g·ªçi ensure ƒë·ªÉ recreate
    await ensureOverviewMessage(client);
  } catch (err) {
    console.error("‚ùå L·ªói updateDecayOverview:", err);
  }
}

function buildOverviewEmbedFromOwner(client, ownerId, decays) {
  let desc = `**üìã Danh s√°ch Decay ASA c·ªßa <@${ownerId}>**\n*C·∫≠p nh·∫≠t t·ª± ƒë·ªông m·ªói gi·ªù*\n\n`;

  if (!decays || decays.length === 0) {
    desc += "> ‚ö´ Ch∆∞a c√≥ map n√†o ƒë∆∞·ª£c thi·∫øt l·∫≠p.";
  } else {
    for (const d of decays) {
      const end = new Date(d.start_time).getTime() + d.decay_days * 86400000;
      const leftMs = end - Date.now();
      const leftDays = Math.max(0, Math.floor(leftMs / 86400000));
      const leftHours = Math.max(0, Math.floor((leftMs % 86400000) / 3600000));

      let status;
      if (leftMs <= 0) status = "üî¥ ƒê√£ h·∫øt h·∫°n decay";
      else if (leftDays <= 1) status = `üü† C√≤n ${leftDays} ng√†y ${leftHours} gi·ªù`;
      else status = `üü¢ C√≤n ${leftDays} ng√†y ${leftHours} gi·ªù`;

      const mapTitle = d.map_label
        ? `${d.map_name} - ${d.map_label}`
        : d.map_name;

      desc += `> üó∫Ô∏è **${mapTitle}**\n> \`${status}\`\n\n`;
    }
  }

  return new EmbedBuilder()
    .setColor(0x1e1f22)
    .setTitle("üõ°Ô∏è Check Decay - ASA Overview")
    .setDescription(desc)
    .setThumbnail(client.user.displayAvatarURL())
    .setTimestamp()
    .setFooter({
      text: "Brought to you by Ayaka ‚Ä¢ ASA System",
      iconURL: client.user.displayAvatarURL(),
    });
}
/**
 * G·ª≠i th√¥ng b√°o decay chuy√™n nghi·ªáp (ASA)
 * @param {object} client - Discord Client
 * @param {object} user - User Discord (ng∆∞·ªùi nh·∫≠n)
 * @param {string} mapName - T√™n map (vd: THEISLAND)
 * @param {string|null} mapLabel - Nh√£n ph·ª• (vd: 9999 ho·∫∑c Base A)
 * @param {number} daysLeft - Ng√†y c√≤n l·∫°i
 * @param {number} hoursLeft - Gi·ªù c√≤n l·∫°i
 * @param {string} system - "ASA" ho·∫∑c "ASE"
 */
async function sendDecayAlertEmbed(client, user, mapName, mapLabel, daysLeft, hoursLeft, system = "ASA") {
  // üé® M√†u v√† icon theo th·ªùi gian c√≤n l·∫°i
  let color = 0xf1c40f; // cam (3 ng√†y)
  let icon = "‚ö†Ô∏è";
  if (daysLeft <= 2) {
    color = 0xe74c3c; // ƒë·ªè (‚â§ 2 ng√†y)
    icon = "üö®";
  }
 
  const backgroundGifs = [
    "https://media.discordapp.net/attachments/.../asa1.gif",
    "https://media.discordapp.net/attachments/.../asa2.gif",
    "https://media.discordapp.net/attachments/.../asa3.gif",
    "https://media.discordapp.net/attachments/.../asa4.gif",
    "https://media.discordapp.net/attachments/.../asa5.gif",
  ];
  const randomImage = backgroundGifs[Math.floor(Math.random() * backgroundGifs.length)];

  // üó∫Ô∏è Hi·ªÉn th·ªã map
  const mapDisplay = mapLabel ? `${mapName} - ${mapLabel}` : mapName;

  // üß± T·∫°o embed th√¥ng b√°o
  const embed = new EmbedBuilder()
    .setColor(color)
    .setTitle(`${icon} BASE DECAY WARNING (${system})`)
    .setDescription(
      `**<@${user.id}>**, base c·ªßa b·∫°n s·∫Øp decay!\n\n` +
      `üó∫Ô∏è **Map:** ${mapDisplay}\n` +
      `‚è≥ **Th·ªùi gian c√≤n l·∫°i:** ${daysLeft} ng√†y ${hoursLeft} gi·ªù\n` +
      `üìÖ **H·ªá th·ªëng:** ${system}\n\n` +
      `> H√£y v√†o game ƒë·ªÉ reset decay tr∆∞·ªõc khi h·∫øt h·∫°n.`
    )
    .setThumbnail(user.displayAvatarURL())
    .setImage(randomImage) // ‚úÖ ·∫£nh ng·∫´u nhi√™n
    .setTimestamp()
    .setFooter({
      text: `Brought to you by Ayaka ‚Ä¢ ${system} Decay Monitor`,
      iconURL: client.user.displayAvatarURL(),
    });

  // üì¢ G·ª≠i tin nh·∫Øn ƒë·∫øn k√™nh SPAM t∆∞∆°ng ·ª©ng
  const channelId = system === "ASA"
    ? process.env.NEWS_SPAM_ID_ASA   // ‚öôÔ∏è ASA c·∫£nh b√°o ‚Üí k√™nh spam ASA
    : process.env.NEWS_SPAM_ID;      // ‚öôÔ∏è ASE c·∫£nh b√°o ‚Üí k√™nh spam ASE

  const channel = await client.channels.fetch(channelId).catch(() => null);
  if (!channel) return console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y channel th√¥ng b√°o cho ${system}`);

  await channel.send({ embeds: [embed] });
}



/* ==========================
   EXPORTS
========================== */
module.exports = {
  ASA_MAPS,
  ensureUserASA,
  addOrResetDecayASA,
  editDecayASA,
  deleteDecayASA,
  resetDecayASA,
  resetAllDecaysASA,
  getUserDecaysASA,
  buildDecayListEmbed,
  checkDecayRemindersASA,
  ensureOverviewMessage,
  updateDecayOverview,
};
